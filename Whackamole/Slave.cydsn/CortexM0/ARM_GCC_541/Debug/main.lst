ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	i2cReadBuffer
  20              		.data
  21              		.align	2
  22              		.type	i2cReadBuffer, %object
  23              		.size	i2cReadBuffer, 32
  24              	i2cReadBuffer:
  25 0000 01       		.byte	1
  26 0001 FF       		.byte	-1
  27 0002 17       		.byte	23
  28 0003 00000000 		.space	29
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.comm	i2cWriteBuffer,32,4
  30              		.global	buttonStatus
  31              		.bss
  32              		.type	buttonStatus, %object
  33              		.size	buttonStatus, 1
  34              	buttonStatus:
  35 0000 00       		.space	1
  36              		.section	.text.main,"ax",%progbits
  37              		.align	2
  38              		.global	main
  39              		.code	16
  40              		.thumb_func
  41              		.type	main, %function
  42              	main:
  43              	.LFB32:
  44              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** SLAVE
   3:main.c        **** *******************************************************************************/
   4:main.c        **** 
   5:main.c        **** #include <main.h>
   6:main.c        **** 
   7:main.c        **** /* I2C slave read and write buffers */
   8:main.c        **** uint8 i2cReadBuffer [BUFFER_SIZE] = {PACKET_SOP, STS_CMD_FAIL, PACKET_EOP};
   9:main.c        **** uint8 i2cWriteBuffer[BUFFER_SIZE];
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 2


  10:main.c        **** void SetTileColor(int block_number, uint32 color);
  11:main.c        **** uint8 buttonStatus = 0;
  12:main.c        **** 
  13:main.c        **** /*******************************************************************************
  14:main.c        **** * Function Name: main
  15:main.c        **** ********************************************************************************
  16:main.c        **** * Summary:
  17:main.c        **** *  Main function performs following actions:
  18:main.c        **** *   1. Turns off status RGB LED
  19:main.c        **** *   2. Sets up I2C slave write and read buffers.
  20:main.c        **** *   3. Starts I2C slave (SCB mode) component.
  21:main.c        **** *   4. Enables global interrupts.
  22:main.c        **** *   5. Waits for command from the I2C master to control the RGB LED.
  23:main.c        **** *
  24:main.c        **** * Parameters:
  25:main.c        **** *  None
  26:main.c        **** *
  27:main.c        **** * Return:
  28:main.c        **** *  None
  29:main.c        **** *
  30:main.c        **** *******************************************************************************/
  31:main.c        **** int main()
  32:main.c        **** {
  45              		.loc 1 32 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 8
  48              		@ frame_needed = 1, uses_anonymous_args = 0
  49 0000 90B5     		push	{r4, r7, lr}
  50              		.cfi_def_cfa_offset 12
  51              		.cfi_offset 4, -12
  52              		.cfi_offset 7, -8
  53              		.cfi_offset 14, -4
  54 0002 83B0     		sub	sp, sp, #12
  55              		.cfi_def_cfa_offset 24
  56 0004 00AF     		add	r7, sp, #0
  57              		.cfi_def_cfa_register 7
  33:main.c        ****     //Start lights and initialize the variables for flex sensors
  34:main.c        **** //    StripLights_Start();
  35:main.c        ****  //   StripLights_Dim(0);
  36:main.c        **** 
  37:main.c        ****     bool isPressed = false;
  58              		.loc 1 37 0
  59 0006 FB1D     		adds	r3, r7, #7
  60 0008 0022     		movs	r2, #0
  61 000a 1A70     		strb	r2, [r3]
  38:main.c        ****     i2cReadBuffer[PACKET_EOP_POS] = PACKET_EOP; //janky way of setting the end packet
  62              		.loc 1 38 0
  63 000c 434B     		ldr	r3, .L10
  64 000e 1722     		movs	r2, #23
  65 0010 DA77     		strb	r2, [r3, #31]
  39:main.c        ****     
  40:main.c        ****     uint8 status = 0;
  66              		.loc 1 40 0
  67 0012 BB1D     		adds	r3, r7, #6
  68 0014 0022     		movs	r2, #0
  69 0016 1A70     		strb	r2, [r3]
  41:main.c        ****                     LED_RED_Write  (LED_OFF);
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 3


  70              		.loc 1 41 0
  71 0018 0120     		movs	r0, #1
  72 001a FFF7FEFF 		bl	LED_RED_Write
  42:main.c        ****                     LED_GREEN_Write(LED_ON);
  73              		.loc 1 42 0
  74 001e 0020     		movs	r0, #0
  75 0020 FFF7FEFF 		bl	LED_GREEN_Write
  43:main.c        ****                     LED_BLUE_Write (LED_ON);
  76              		.loc 1 43 0
  77 0024 0020     		movs	r0, #0
  78 0026 FFF7FEFF 		bl	LED_BLUE_Write
  44:main.c        **** 
  45:main.c        **** 
  46:main.c        ****     /* Start I2C slave (SCB mode) */
  47:main.c        ****     I2CS_I2CSlaveInitReadBuf (i2cReadBuffer,  BUFFER_SIZE);
  79              		.loc 1 47 0
  80 002a 3C4B     		ldr	r3, .L10
  81 002c 2021     		movs	r1, #32
  82 002e 1800     		movs	r0, r3
  83 0030 FFF7FEFF 		bl	I2CS_I2CSlaveInitReadBuf
  48:main.c        ****     I2CS_I2CSlaveInitWriteBuf(i2cWriteBuffer, BUFFER_SIZE);
  84              		.loc 1 48 0
  85 0034 3A4B     		ldr	r3, .L10+4
  86 0036 2021     		movs	r1, #32
  87 0038 1800     		movs	r0, r3
  88 003a FFF7FEFF 		bl	I2CS_I2CSlaveInitWriteBuf
  49:main.c        ****     I2CS_I2CSlaveSetAddress(0x08u);
  89              		.loc 1 49 0
  90 003e 0820     		movs	r0, #8
  91 0040 FFF7FEFF 		bl	I2CS_I2CSlaveSetAddress
  50:main.c        ****     I2CS_Start();
  92              		.loc 1 50 0
  93 0044 FFF7FEFF 		bl	I2CS_Start
  51:main.c        **** 
  52:main.c        ****     CyGlobalIntEnable;
  94              		.loc 1 52 0
  95              		.syntax divided
  96              	@ 52 "main.c" 1
  97 0048 62B6     		CPSIE   i
  98              	@ 0 "" 2
  99              		.thumb
 100              		.syntax unified
 101              	.L9:
  53:main.c        **** 
  54:main.c        ****     /***************************************************************************
  55:main.c        ****     * Main polling loop
  56:main.c        ****     ***************************************************************************/
  57:main.c        ****     for (;;)
  58:main.c        ****     {
  59:main.c        ****         if(!Button_Read() && isPressed){
 102              		.loc 1 59 0
 103 004a FFF7FEFF 		bl	Button_Read
 104 004e 031E     		subs	r3, r0, #0
 105 0050 0AD1     		bne	.L2
 106              		.loc 1 59 0 is_stmt 0 discriminator 1
 107 0052 FB1D     		adds	r3, r7, #7
 108 0054 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 4


 109 0056 002B     		cmp	r3, #0
 110 0058 06D0     		beq	.L2
  60:main.c        ****             isPressed = true;
 111              		.loc 1 60 0 is_stmt 1
 112 005a FB1D     		adds	r3, r7, #7
 113 005c 0122     		movs	r2, #1
 114 005e 1A70     		strb	r2, [r3]
  61:main.c        ****             LED_RED_Write(LED_ON);
 115              		.loc 1 61 0
 116 0060 0020     		movs	r0, #0
 117 0062 FFF7FEFF 		bl	LED_RED_Write
 118 0066 24E0     		b	.L3
 119              	.L2:
  62:main.c        ****         }
  63:main.c        ****         else if(!Button_Read() && !isPressed){
 120              		.loc 1 63 0
 121 0068 FFF7FEFF 		bl	Button_Read
 122 006c 031E     		subs	r3, r0, #0
 123 006e 1AD1     		bne	.L4
 124              		.loc 1 63 0 is_stmt 0 discriminator 1
 125 0070 FB1D     		adds	r3, r7, #7
 126 0072 1B78     		ldrb	r3, [r3]
 127 0074 0122     		movs	r2, #1
 128 0076 5340     		eors	r3, r2
 129 0078 DBB2     		uxtb	r3, r3
 130 007a 002B     		cmp	r3, #0
 131 007c 13D0     		beq	.L4
  64:main.c        ****             buttonStatus++;
 132              		.loc 1 64 0 is_stmt 1
 133 007e 294B     		ldr	r3, .L10+8
 134 0080 1B78     		ldrb	r3, [r3]
 135 0082 0133     		adds	r3, r3, #1
 136 0084 DAB2     		uxtb	r2, r3
 137 0086 274B     		ldr	r3, .L10+8
 138 0088 1A70     		strb	r2, [r3]
  65:main.c        ****             isPressed = true;
 139              		.loc 1 65 0
 140 008a FB1D     		adds	r3, r7, #7
 141 008c 0122     		movs	r2, #1
 142 008e 1A70     		strb	r2, [r3]
  66:main.c        ****             LED_RED_Write(LED_ON);
 143              		.loc 1 66 0
 144 0090 0020     		movs	r0, #0
 145 0092 FFF7FEFF 		bl	LED_RED_Write
  67:main.c        ****             if(buttonStatus == 16) buttonStatus = 0;
 146              		.loc 1 67 0
 147 0096 234B     		ldr	r3, .L10+8
 148 0098 1B78     		ldrb	r3, [r3]
 149 009a 102B     		cmp	r3, #16
 150 009c 09D1     		bne	.L3
 151              		.loc 1 67 0 is_stmt 0 discriminator 1
 152 009e 214B     		ldr	r3, .L10+8
 153 00a0 0022     		movs	r2, #0
 154 00a2 1A70     		strb	r2, [r3]
 155 00a4 05E0     		b	.L3
 156              	.L4:
  68:main.c        ****         }
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 5


  69:main.c        ****         else{
  70:main.c        ****             isPressed = false;
 157              		.loc 1 70 0 is_stmt 1
 158 00a6 FB1D     		adds	r3, r7, #7
 159 00a8 0022     		movs	r2, #0
 160 00aa 1A70     		strb	r2, [r3]
  71:main.c        ****             LED_RED_Write(LED_OFF);
 161              		.loc 1 71 0
 162 00ac 0120     		movs	r0, #1
 163 00ae FFF7FEFF 		bl	LED_RED_Write
 164              	.L3:
  72:main.c        ****         }
  73:main.c        ****         
  74:main.c        ****         /* Write complete: parse command packet */
  75:main.c        ****         if (0u != (I2CS_I2CSlaveStatus() & I2CS_I2C_SSTAT_WR_CMPLT))
 165              		.loc 1 75 0
 166 00b2 FFF7FEFF 		bl	I2CS_I2CSlaveStatus
 167 00b6 0200     		movs	r2, r0
 168 00b8 1023     		movs	r3, #16
 169 00ba 1340     		ands	r3, r2
 170 00bc 22D0     		beq	.L6
  76:main.c        ****         {
  77:main.c        **** //            ExecuteCommand(i2cWriteBuffer, i2cReadBuffer); //passing in the entire array
  78:main.c        **** //            uint32 writeBufferSize = I2CS_I2CSlaveGetWriteBufSize();
  79:main.c        **** //            /* Check packet length */
  80:main.c        ****             if (PACKET_SIZE == I2CS_I2CSlaveGetWriteBufSize())
 171              		.loc 1 80 0
 172 00be FFF7FEFF 		bl	I2CS_I2CSlaveGetWriteBufSize
 173 00c2 0300     		movs	r3, r0
 174 00c4 202B     		cmp	r3, #32
 175 00c6 0FD1     		bne	.L7
  81:main.c        ****             {
  82:main.c        **** //                /* Check start and end of packet markers */
  83:main.c        ****                 if ((i2cWriteBuffer[PACKET_SOP_POS] == PACKET_SOP) &&
 176              		.loc 1 83 0
 177 00c8 154B     		ldr	r3, .L10+4
 178 00ca 1B78     		ldrb	r3, [r3]
 179 00cc 012B     		cmp	r3, #1
 180 00ce 0BD1     		bne	.L7
  84:main.c        ****                     (i2cWriteBuffer[PACKET_EOP_POS] == PACKET_EOP))
 181              		.loc 1 84 0 discriminator 1
 182 00d0 134B     		ldr	r3, .L10+4
 183 00d2 DB7F     		ldrb	r3, [r3, #31]
  83:main.c        ****                     (i2cWriteBuffer[PACKET_EOP_POS] == PACKET_EOP))
 184              		.loc 1 83 0 discriminator 1
 185 00d4 172B     		cmp	r3, #23
 186 00d6 07D1     		bne	.L7
  85:main.c        ****                 {
  86:main.c        ****                     status = ExecuteCommand(i2cWriteBuffer[PACKET_CMD_POS]);  //CHANGED
 187              		.loc 1 86 0
 188 00d8 114B     		ldr	r3, .L10+4
 189 00da 5B78     		ldrb	r3, [r3, #1]
 190 00dc BC1D     		adds	r4, r7, #6
 191 00de 1800     		movs	r0, r3
 192 00e0 FFF7FEFF 		bl	ExecuteCommand
 193 00e4 0300     		movs	r3, r0
 194 00e6 2370     		strb	r3, [r4]
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 6


 195              	.L7:
  87:main.c        ****                     
  88:main.c        ****                 }
  89:main.c        ****             }
  90:main.c        **** 
  91:main.c        ****             /* Clear slave write buffer and status */
  92:main.c        ****             I2CS_I2CSlaveClearWriteBuf();
 196              		.loc 1 92 0
 197 00e8 FFF7FEFF 		bl	I2CS_I2CSlaveClearWriteBuf
  93:main.c        ****             (void) I2CS_I2CSlaveClearWriteStatus();
 198              		.loc 1 93 0
 199 00ec FFF7FEFF 		bl	I2CS_I2CSlaveClearWriteStatus
  94:main.c        **** 
  95:main.c        ****             /* Update read buffer*/
  96:main.c        **** //            i2cReadBuffer[PACKET_STS_POS] = status;  //OLD
  97:main.c        **** //            status = STS_CMD_FAIL;
  98:main.c        ****             i2cReadBuffer[PACKET_STS_POS] = STS_CMD_DONE;
 200              		.loc 1 98 0
 201 00f0 0A4B     		ldr	r3, .L10
 202 00f2 0022     		movs	r2, #0
 203 00f4 5A70     		strb	r2, [r3, #1]
  99:main.c        ****             i2cReadBuffer[2] = buttonStatus;
 204              		.loc 1 99 0
 205 00f6 0B4B     		ldr	r3, .L10+8
 206 00f8 1A78     		ldrb	r2, [r3]
 207 00fa 084B     		ldr	r3, .L10
 208 00fc 9A70     		strb	r2, [r3, #2]
 100:main.c        ****             buttonStatus = 0;
 209              		.loc 1 100 0
 210 00fe 094B     		ldr	r3, .L10+8
 211 0100 0022     		movs	r2, #0
 212 0102 1A70     		strb	r2, [r3]
 213              	.L6:
 101:main.c        ****             //END UPDATE READ BUFFER
 102:main.c        ****         }
 103:main.c        **** 
 104:main.c        ****         /* Read complete: expose buffer to master */
 105:main.c        ****         if (0u != (I2CS_I2CSlaveStatus() & I2CS_I2C_SSTAT_RD_CMPLT))
 214              		.loc 1 105 0
 215 0104 FFF7FEFF 		bl	I2CS_I2CSlaveStatus
 216 0108 0200     		movs	r2, r0
 217 010a 0123     		movs	r3, #1
 218 010c 1340     		ands	r3, r2
 219 010e 9CD0     		beq	.L9
 106:main.c        ****         {
 107:main.c        ****             /* Clear slave read buffer and status */
 108:main.c        ****             I2CS_I2CSlaveClearReadBuf();
 220              		.loc 1 108 0
 221 0110 FFF7FEFF 		bl	I2CS_I2CSlaveClearReadBuf
 109:main.c        ****             (void) I2CS_I2CSlaveClearReadStatus();
 222              		.loc 1 109 0
 223 0114 FFF7FEFF 		bl	I2CS_I2CSlaveClearReadStatus
 110:main.c        ****         }
 111:main.c        ****     }
 224              		.loc 1 111 0
 225 0118 97E7     		b	.L9
 226              	.L11:
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 7


 227 011a C046     		.align	2
 228              	.L10:
 229 011c 00000000 		.word	i2cReadBuffer
 230 0120 00000000 		.word	i2cWriteBuffer
 231 0124 00000000 		.word	buttonStatus
 232              		.cfi_endproc
 233              	.LFE32:
 234              		.size	main, .-main
 235              		.section	.text.ExecuteCommand,"ax",%progbits
 236              		.align	2
 237              		.global	ExecuteCommand
 238              		.code	16
 239              		.thumb_func
 240              		.type	ExecuteCommand, %function
 241              	ExecuteCommand:
 242              	.LFB33:
 112:main.c        **** }
 113:main.c        **** 
 114:main.c        **** 
 115:main.c        **** /*******************************************************************************
 116:main.c        **** * Function Name: ExecuteCommand
 117:main.c        **** ********************************************************************************
 118:main.c        **** * Summary:
 119:main.c        **** *  Executes received command to control the LED color and returns status.
 120:main.c        **** *  If the command is unknown, the LED color is not changed.
 121:main.c        **** *
 122:main.c        **** * Parameters:
 123:main.c        **** *  cmd: command to execute. Available commands:
 124:main.c        **** *   - CMD_SET_RED:   set red color of the LED.
 125:main.c        **** *   - CMD_SET_GREEN: set green color of the LED.
 126:main.c        **** *   - CMD_SET_BLUE:  set blue color of the LED.
 127:main.c        **** *   - CMD_SET_OFF:   turn off the LED.
 128:main.c        **** *
 129:main.c        **** * Return:
 130:main.c        **** *  Returns status of command execution. There are two statuses
 131:main.c        **** *  - STS_CMD_DONE: command is executed successfully.
 132:main.c        **** *  - STS_CMD_FAIL: unknown command
 133:main.c        **** *
 134:main.c        **** 
 135:main.c        **** 
 136:main.c        **** BIG CHANGES
 137:main.c        **** Parameters: uint8 array[6]
 138:main.c        **** Returns the status of the execution. Includes the number of times that the button
 139:main.c        **** was pressed on the board in binary in an array
 140:main.c        **** *******************************************************************************/
 141:main.c        **** 
 142:main.c        **** /*void ExecuteCommand(uint8* cmd, uint8* status){
 143:main.c        ****     //read the command and execute
 144:main.c        ****     int command = 0;
 145:main.c        ****     command += cmd[1] << 3;
 146:main.c        ****     command += cmd[2] << 2;
 147:main.c        ****     command += cmd[3] << 1;
 148:main.c        ****     command += cmd[4];
 149:main.c        ****     
 150:main.c        ****     if(command % 4 == 0){
 151:main.c        ****         //set the color to be white
 152:main.c        ****         LED_RED_Write(LED_ON);
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 8


 153:main.c        ****         LED_GREEN_Write(LED_ON);
 154:main.c        ****         LED_BLUE_Write(LED_ON);
 155:main.c        ****     }
 156:main.c        ****     else if(command % 4 == 1){
 157:main.c        ****         //set the color to be red
 158:main.c        ****         LED_RED_Write(LED_ON);
 159:main.c        ****         LED_GREEN_Write(LED_OFF);
 160:main.c        ****         LED_BLUE_Write(LED_OFF);
 161:main.c        ****     }
 162:main.c        ****     else if(command % 4 == 2){
 163:main.c        ****         //set the color to be green
 164:main.c        ****         LED_RED_Write(LED_OFF);
 165:main.c        ****         LED_GREEN_Write(LED_ON);
 166:main.c        ****         LED_BLUE_Write(LED_OFF);
 167:main.c        ****     }
 168:main.c        ****     else{
 169:main.c        ****         //set the color to be blue
 170:main.c        ****         LED_RED_Write(LED_OFF);
 171:main.c        ****         LED_GREEN_Write(LED_OFF);
 172:main.c        ****         LED_BLUE_Write(LED_ON);
 173:main.c        ****     }
 174:main.c        ****     
 175:main.c        ****     status[1] = buttonStatus & 8;
 176:main.c        ****     status[2] = buttonStatus & 4;
 177:main.c        ****     status[3] = buttonStatus & 2;
 178:main.c        ****     status[4] = buttonStatus & 1;
 179:main.c        **** }*/
 180:main.c        **** 
 181:main.c        **** uint8 ExecuteCommand(uint32 cmd)
 182:main.c        **** {
 243              		.loc 1 182 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 16
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247 0000 80B5     		push	{r7, lr}
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 84B0     		sub	sp, sp, #16
 252              		.cfi_def_cfa_offset 24
 253 0004 00AF     		add	r7, sp, #0
 254              		.cfi_def_cfa_register 7
 255 0006 7860     		str	r0, [r7, #4]
 183:main.c        ****     uint8 status = buttonStatus;
 256              		.loc 1 183 0
 257 0008 0F23     		movs	r3, #15
 258 000a FB18     		adds	r3, r7, r3
 259 000c 334A     		ldr	r2, .L25
 260 000e 1278     		ldrb	r2, [r2]
 261 0010 1A70     		strb	r2, [r3]
 184:main.c        **** /*
 185:main.c        ****     uint8 flex0 = flex0_Read();
 186:main.c        ****     uint8 flex1 = flex1_Read();
 187:main.c        ****     uint8 flex2 = flex2_Read();
 188:main.c        ****     uint8 flex3 = flex3_Read();
 189:main.c        **** 
 190:main.c        ****     status = flex0 + (flex1 << 1) + (flex2 << 2) + (flex3 << 3);
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 9


 191:main.c        ****     
 192:main.c        ****     //parse the cmd
 193:main.c        ****     uint8 blockNum = cmd & 0xC0;
 194:main.c        ****     uint32 color1 = cmd & 0x7;
 195:main.c        ****     uint32 color2 = cmd & 0x38;
 196:main.c        ****     int start_val;
 197:main.c        ****     
 198:main.c        ****     //tiles 2 and 3
 199:main.c        ****     if(blockNum == 1){
 200:main.c        ****         start_val = 2;
 201:main.c        ****     }
 202:main.c        ****     else {
 203:main.c        ****         start_val = 0;
 204:main.c        ****     }
 205:main.c        ****     
 206:main.c        ****     for(int i = start_val; i < start_val + 2; i++){
 207:main.c        **** */            
 208:main.c        ****         switch (cmd)
 262              		.loc 1 208 0
 263 0012 7B68     		ldr	r3, [r7, #4]
 264 0014 072B     		cmp	r3, #7
 265 0016 55D8     		bhi	.L13
 266 0018 7B68     		ldr	r3, [r7, #4]
 267 001a 9A00     		lsls	r2, r3, #2
 268 001c 304B     		ldr	r3, .L25+4
 269 001e D318     		adds	r3, r2, r3
 270 0020 1B68     		ldr	r3, [r3]
 271 0022 9F46     		mov	pc, r3
 272              		.section	.rodata
 273              		.align	2
 274              	.L15:
 275 0000 B0000000 		.word	.L14
 276 0004 24000000 		.word	.L16
 277 0008 38000000 		.word	.L17
 278 000c 4C000000 		.word	.L18
 279 0010 60000000 		.word	.L19
 280 0014 74000000 		.word	.L20
 281 0018 88000000 		.word	.L21
 282 001c 9C000000 		.word	.L22
 283              		.section	.text.ExecuteCommand
 284              	.L16:
 209:main.c        ****         {
 210:main.c        ****             case CMD_SET_RED:
 211:main.c        ****                 LED_RED_Write  (LED_ON);
 285              		.loc 1 211 0
 286 0024 0020     		movs	r0, #0
 287 0026 FFF7FEFF 		bl	LED_RED_Write
 212:main.c        ****                 LED_GREEN_Write(LED_OFF);
 288              		.loc 1 212 0
 289 002a 0120     		movs	r0, #1
 290 002c FFF7FEFF 		bl	LED_GREEN_Write
 213:main.c        ****                 LED_BLUE_Write (LED_OFF);
 291              		.loc 1 213 0
 292 0030 0120     		movs	r0, #1
 293 0032 FFF7FEFF 		bl	LED_BLUE_Write
 214:main.c        ****                 //SetTileColor(i, StripLights_RED);
 215:main.c        ****                 break;
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 10


 294              		.loc 1 215 0
 295 0036 4AE0     		b	.L23
 296              	.L17:
 216:main.c        **** 
 217:main.c        ****             case CMD_SET_GREEN:
 218:main.c        ****                 LED_RED_Write  (LED_OFF);
 297              		.loc 1 218 0
 298 0038 0120     		movs	r0, #1
 299 003a FFF7FEFF 		bl	LED_RED_Write
 219:main.c        ****                 LED_GREEN_Write(LED_ON);
 300              		.loc 1 219 0
 301 003e 0020     		movs	r0, #0
 302 0040 FFF7FEFF 		bl	LED_GREEN_Write
 220:main.c        ****                 LED_BLUE_Write (LED_OFF);
 303              		.loc 1 220 0
 304 0044 0120     		movs	r0, #1
 305 0046 FFF7FEFF 		bl	LED_BLUE_Write
 221:main.c        ****                 //SetTileColor(0, StripLights_GREEN);
 222:main.c        ****                 break;
 306              		.loc 1 222 0
 307 004a 40E0     		b	.L23
 308              	.L18:
 223:main.c        **** 
 224:main.c        ****             case CMD_SET_BLUE:
 225:main.c        ****                 LED_RED_Write  (LED_OFF);
 309              		.loc 1 225 0
 310 004c 0120     		movs	r0, #1
 311 004e FFF7FEFF 		bl	LED_RED_Write
 226:main.c        ****                 LED_GREEN_Write(LED_OFF);
 312              		.loc 1 226 0
 313 0052 0120     		movs	r0, #1
 314 0054 FFF7FEFF 		bl	LED_GREEN_Write
 227:main.c        ****                 LED_BLUE_Write (LED_ON);
 315              		.loc 1 227 0
 316 0058 0020     		movs	r0, #0
 317 005a FFF7FEFF 		bl	LED_BLUE_Write
 228:main.c        ****                 //SetTileColor(0, StripLights_BLUE);
 229:main.c        ****                 break;
 318              		.loc 1 229 0
 319 005e 36E0     		b	.L23
 320              	.L19:
 230:main.c        ****             case CMD_SET_RED_GREEN:
 231:main.c        ****                 LED_RED_Write  (LED_ON);
 321              		.loc 1 231 0
 322 0060 0020     		movs	r0, #0
 323 0062 FFF7FEFF 		bl	LED_RED_Write
 232:main.c        ****                 LED_GREEN_Write(LED_ON);
 324              		.loc 1 232 0
 325 0066 0020     		movs	r0, #0
 326 0068 FFF7FEFF 		bl	LED_GREEN_Write
 233:main.c        ****                 LED_BLUE_Write (LED_OFF);
 327              		.loc 1 233 0
 328 006c 0120     		movs	r0, #1
 329 006e FFF7FEFF 		bl	LED_BLUE_Write
 234:main.c        ****                 //SetTileColor(0, StripLights_YELLOW);
 235:main.c        ****                 break;
 330              		.loc 1 235 0
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 11


 331 0072 2CE0     		b	.L23
 332              	.L20:
 236:main.c        ****             case CMD_SET_RED_BLUE:
 237:main.c        ****                 LED_RED_Write  (LED_ON);
 333              		.loc 1 237 0
 334 0074 0020     		movs	r0, #0
 335 0076 FFF7FEFF 		bl	LED_RED_Write
 238:main.c        ****                 LED_GREEN_Write(LED_OFF);
 336              		.loc 1 238 0
 337 007a 0120     		movs	r0, #1
 338 007c FFF7FEFF 		bl	LED_GREEN_Write
 239:main.c        ****                 LED_BLUE_Write (LED_ON);
 339              		.loc 1 239 0
 340 0080 0020     		movs	r0, #0
 341 0082 FFF7FEFF 		bl	LED_BLUE_Write
 240:main.c        ****                 //SetTileColor(0, StripLights_VIOLET);
 241:main.c        ****                 break;
 342              		.loc 1 241 0
 343 0086 22E0     		b	.L23
 344              	.L21:
 242:main.c        ****             case CMD_SET_GREEN_BLUE:
 243:main.c        ****                 LED_RED_Write  (LED_OFF);
 345              		.loc 1 243 0
 346 0088 0120     		movs	r0, #1
 347 008a FFF7FEFF 		bl	LED_RED_Write
 244:main.c        ****                 LED_GREEN_Write(LED_ON);
 348              		.loc 1 244 0
 349 008e 0020     		movs	r0, #0
 350 0090 FFF7FEFF 		bl	LED_GREEN_Write
 245:main.c        ****                 LED_BLUE_Write (LED_ON);
 351              		.loc 1 245 0
 352 0094 0020     		movs	r0, #0
 353 0096 FFF7FEFF 		bl	LED_BLUE_Write
 246:main.c        ****                 //SetTileColor(0, StripLights_TURQUOSE);
 247:main.c        ****                 break;
 354              		.loc 1 247 0
 355 009a 18E0     		b	.L23
 356              	.L22:
 248:main.c        ****             case CMD_SET_RED_GREEN_BLUE:
 249:main.c        ****                 LED_RED_Write  (LED_ON);
 357              		.loc 1 249 0
 358 009c 0020     		movs	r0, #0
 359 009e FFF7FEFF 		bl	LED_RED_Write
 250:main.c        ****                 LED_GREEN_Write(LED_ON);
 360              		.loc 1 250 0
 361 00a2 0020     		movs	r0, #0
 362 00a4 FFF7FEFF 		bl	LED_GREEN_Write
 251:main.c        ****                 LED_BLUE_Write (LED_ON);
 363              		.loc 1 251 0
 364 00a8 0020     		movs	r0, #0
 365 00aa FFF7FEFF 		bl	LED_BLUE_Write
 252:main.c        ****                 //SetTileColor(0, StripLights_DIM_WHITE);
 253:main.c        ****                 break;
 366              		.loc 1 253 0
 367 00ae 0EE0     		b	.L23
 368              	.L14:
 254:main.c        **** 
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 12


 255:main.c        ****             case CMD_SET_OFF:
 256:main.c        ****                         LED_RED_Write  (LED_OFF);
 369              		.loc 1 256 0
 370 00b0 0120     		movs	r0, #1
 371 00b2 FFF7FEFF 		bl	LED_RED_Write
 257:main.c        ****                         LED_GREEN_Write(LED_OFF);
 372              		.loc 1 257 0
 373 00b6 0120     		movs	r0, #1
 374 00b8 FFF7FEFF 		bl	LED_GREEN_Write
 258:main.c        ****                         LED_BLUE_Write (LED_OFF);
 375              		.loc 1 258 0
 376 00bc 0120     		movs	r0, #1
 377 00be FFF7FEFF 		bl	LED_BLUE_Write
 259:main.c        ****                 //        SetTileColor(0, 0);
 260:main.c        ****                 break;
 378              		.loc 1 260 0
 379 00c2 04E0     		b	.L23
 380              	.L13:
 261:main.c        **** 
 262:main.c        ****             default:
 263:main.c        ****                 status = STS_CMD_FAIL;
 381              		.loc 1 263 0
 382 00c4 0F23     		movs	r3, #15
 383 00c6 FB18     		adds	r3, r7, r3
 384 00c8 FF22     		movs	r2, #255
 385 00ca 1A70     		strb	r2, [r3]
 264:main.c        ****                 break;
 386              		.loc 1 264 0
 387 00cc C046     		nop
 388              	.L23:
 265:main.c        ****         }
 266:main.c        ****     return (status);
 389              		.loc 1 266 0
 390 00ce 0F23     		movs	r3, #15
 391 00d0 FB18     		adds	r3, r7, r3
 392 00d2 1B78     		ldrb	r3, [r3]
 267:main.c        **** }
 393              		.loc 1 267 0
 394 00d4 1800     		movs	r0, r3
 395 00d6 BD46     		mov	sp, r7
 396 00d8 04B0     		add	sp, sp, #16
 397              		@ sp needed
 398 00da 80BD     		pop	{r7, pc}
 399              	.L26:
 400              		.align	2
 401              	.L25:
 402 00dc 00000000 		.word	buttonStatus
 403 00e0 00000000 		.word	.L15
 404              		.cfi_endproc
 405              	.LFE33:
 406              		.size	ExecuteCommand, .-ExecuteCommand
 407              		.section	.text.SetTileColor,"ax",%progbits
 408              		.align	2
 409              		.global	SetTileColor
 410              		.code	16
 411              		.thumb_func
 412              		.type	SetTileColor, %function
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 13


 413              	SetTileColor:
 414              	.LFB34:
 268:main.c        **** 
 269:main.c        **** 
 270:main.c        **** 
 271:main.c        **** void SetTileColor(int block_number, uint32 color) {
 415              		.loc 1 271 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 16
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419 0000 80B5     		push	{r7, lr}
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 7, -8
 422              		.cfi_offset 14, -4
 423 0002 84B0     		sub	sp, sp, #16
 424              		.cfi_def_cfa_offset 24
 425 0004 00AF     		add	r7, sp, #0
 426              		.cfi_def_cfa_register 7
 427 0006 7860     		str	r0, [r7, #4]
 428 0008 3960     		str	r1, [r7]
 429              	.LBB2:
 272:main.c        **** 	for (uint32 led = 0; led < 15; led++) {
 430              		.loc 1 272 0
 431 000a 0023     		movs	r3, #0
 432 000c FB60     		str	r3, [r7, #12]
 433 000e 08E0     		b	.L28
 434              	.L29:
 273:main.c        **** 		StripLights_Pixel(led, block_number, color);
 435              		.loc 1 273 0 discriminator 3
 436 0010 FB68     		ldr	r3, [r7, #12]
 437 0012 3A68     		ldr	r2, [r7]
 438 0014 7968     		ldr	r1, [r7, #4]
 439 0016 1800     		movs	r0, r3
 440 0018 FFF7FEFF 		bl	StripLights_Pixel
 272:main.c        **** 	for (uint32 led = 0; led < 15; led++) {
 441              		.loc 1 272 0 discriminator 3
 442 001c FB68     		ldr	r3, [r7, #12]
 443 001e 0133     		adds	r3, r3, #1
 444 0020 FB60     		str	r3, [r7, #12]
 445              	.L28:
 272:main.c        **** 	for (uint32 led = 0; led < 15; led++) {
 446              		.loc 1 272 0 is_stmt 0 discriminator 1
 447 0022 FB68     		ldr	r3, [r7, #12]
 448 0024 0E2B     		cmp	r3, #14
 449 0026 F3D9     		bls	.L29
 450              	.LBE2:
 274:main.c        **** 	}
 275:main.c        ****     while (StripLights_Ready() == 0);
 451              		.loc 1 275 0 is_stmt 1
 452 0028 C046     		nop
 453              	.L30:
 454              		.loc 1 275 0 is_stmt 0 discriminator 1
 455 002a FFF7FEFF 		bl	StripLights_Ready
 456 002e 031E     		subs	r3, r0, #0
 457 0030 FBD0     		beq	.L30
 276:main.c        **** 	StripLights_Trigger(1);
 458              		.loc 1 276 0 is_stmt 1
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 14


 459 0032 0120     		movs	r0, #1
 460 0034 FFF7FEFF 		bl	StripLights_Trigger
 277:main.c        **** 	CyDelay(10);
 461              		.loc 1 277 0
 462 0038 0A20     		movs	r0, #10
 463 003a FFF7FEFF 		bl	CyDelay
 278:main.c        **** }
 464              		.loc 1 278 0
 465 003e C046     		nop
 466 0040 BD46     		mov	sp, r7
 467 0042 04B0     		add	sp, sp, #16
 468              		@ sp needed
 469 0044 80BD     		pop	{r7, pc}
 470              		.cfi_endproc
 471              	.LFE34:
 472              		.size	SetTileColor, .-SetTileColor
 473 0046 C046     		.text
 474              	.Letext0:
 475              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 476              		.file 3 "./main.h"
 477              		.section	.debug_info,"",%progbits
 478              	.Ldebug_info0:
 479 0000 EA010000 		.4byte	0x1ea
 480 0004 0400     		.2byte	0x4
 481 0006 00000000 		.4byte	.Ldebug_abbrev0
 482 000a 04       		.byte	0x4
 483 000b 01       		.uleb128 0x1
 484 000c FF000000 		.4byte	.LASF35
 485 0010 0C       		.byte	0xc
 486 0011 1C020000 		.4byte	.LASF36
 487 0015 5E000000 		.4byte	.LASF37
 488 0019 00000000 		.4byte	.Ldebug_ranges0+0
 489 001d 00000000 		.4byte	0
 490 0021 00000000 		.4byte	.Ldebug_line0
 491 0025 02       		.uleb128 0x2
 492 0026 01       		.byte	0x1
 493 0027 06       		.byte	0x6
 494 0028 7E020000 		.4byte	.LASF0
 495 002c 02       		.uleb128 0x2
 496 002d 01       		.byte	0x1
 497 002e 08       		.byte	0x8
 498 002f B3010000 		.4byte	.LASF1
 499 0033 02       		.uleb128 0x2
 500 0034 02       		.byte	0x2
 501 0035 05       		.byte	0x5
 502 0036 43020000 		.4byte	.LASF2
 503 003a 02       		.uleb128 0x2
 504 003b 02       		.byte	0x2
 505 003c 07       		.byte	0x7
 506 003d 4B000000 		.4byte	.LASF3
 507 0041 02       		.uleb128 0x2
 508 0042 04       		.byte	0x4
 509 0043 05       		.byte	0x5
 510 0044 62020000 		.4byte	.LASF4
 511 0048 02       		.uleb128 0x2
 512 0049 04       		.byte	0x4
 513 004a 07       		.byte	0x7
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 15


 514 004b E7000000 		.4byte	.LASF5
 515 004f 02       		.uleb128 0x2
 516 0050 08       		.byte	0x8
 517 0051 05       		.byte	0x5
 518 0052 0E020000 		.4byte	.LASF6
 519 0056 02       		.uleb128 0x2
 520 0057 08       		.byte	0x8
 521 0058 07       		.byte	0x7
 522 0059 DF010000 		.4byte	.LASF7
 523 005d 03       		.uleb128 0x3
 524 005e 04       		.byte	0x4
 525 005f 05       		.byte	0x5
 526 0060 696E7400 		.ascii	"int\000"
 527 0064 02       		.uleb128 0x2
 528 0065 04       		.byte	0x4
 529 0066 07       		.byte	0x7
 530 0067 C1010000 		.4byte	.LASF8
 531 006b 04       		.uleb128 0x4
 532 006c F9000000 		.4byte	.LASF9
 533 0070 02       		.byte	0x2
 534 0071 D201     		.2byte	0x1d2
 535 0073 2C000000 		.4byte	0x2c
 536 0077 04       		.uleb128 0x4
 537 0078 AC010000 		.4byte	.LASF10
 538 007c 02       		.byte	0x2
 539 007d D401     		.2byte	0x1d4
 540 007f 48000000 		.4byte	0x48
 541 0083 02       		.uleb128 0x2
 542 0084 04       		.byte	0x4
 543 0085 04       		.byte	0x4
 544 0086 B8000000 		.4byte	.LASF11
 545 008a 02       		.uleb128 0x2
 546 008b 08       		.byte	0x8
 547 008c 04       		.byte	0x4
 548 008d 9A010000 		.4byte	.LASF12
 549 0091 02       		.uleb128 0x2
 550 0092 01       		.byte	0x1
 551 0093 08       		.byte	0x8
 552 0094 23020000 		.4byte	.LASF13
 553 0098 02       		.uleb128 0x2
 554 0099 08       		.byte	0x8
 555 009a 04       		.byte	0x4
 556 009b 72020000 		.4byte	.LASF14
 557 009f 02       		.uleb128 0x2
 558 00a0 04       		.byte	0x4
 559 00a1 07       		.byte	0x7
 560 00a2 05020000 		.4byte	.LASF15
 561 00a6 05       		.uleb128 0x5
 562 00a7 01       		.byte	0x1
 563 00a8 2C000000 		.4byte	0x2c
 564 00ac 03       		.byte	0x3
 565 00ad 3A       		.byte	0x3a
 566 00ae E9000000 		.4byte	0xe9
 567 00b2 06       		.uleb128 0x6
 568 00b3 32000000 		.4byte	.LASF16
 569 00b7 00       		.byte	0
 570 00b8 06       		.uleb128 0x6
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 16


 571 00b9 BE000000 		.4byte	.LASF17
 572 00bd 01       		.byte	0x1
 573 00be 06       		.uleb128 0x6
 574 00bf 28020000 		.4byte	.LASF18
 575 00c3 02       		.byte	0x2
 576 00c4 06       		.uleb128 0x6
 577 00c5 8D010000 		.4byte	.LASF19
 578 00c9 03       		.byte	0x3
 579 00ca 06       		.uleb128 0x6
 580 00cb 0D000000 		.4byte	.LASF20
 581 00cf 04       		.byte	0x4
 582 00d0 06       		.uleb128 0x6
 583 00d1 CE010000 		.4byte	.LASF21
 584 00d5 05       		.byte	0x5
 585 00d6 06       		.uleb128 0x6
 586 00d7 1F000000 		.4byte	.LASF22
 587 00db 06       		.byte	0x6
 588 00dc 06       		.uleb128 0x6
 589 00dd A1000000 		.4byte	.LASF23
 590 00e1 07       		.byte	0x7
 591 00e2 06       		.uleb128 0x6
 592 00e3 57020000 		.4byte	.LASF24
 593 00e7 08       		.byte	0x8
 594 00e8 00       		.byte	0
 595 00e9 07       		.uleb128 0x7
 596 00ea A1010000 		.4byte	.LASF28
 597 00ee 01       		.byte	0x1
 598 00ef 1F       		.byte	0x1f
 599 00f0 5D000000 		.4byte	0x5d
 600 00f4 00000000 		.4byte	.LFB32
 601 00f8 28010000 		.4byte	.LFE32-.LFB32
 602 00fc 01       		.uleb128 0x1
 603 00fd 9C       		.byte	0x9c
 604 00fe 1F010000 		.4byte	0x11f
 605 0102 08       		.uleb128 0x8
 606 0103 4D020000 		.4byte	.LASF25
 607 0107 01       		.byte	0x1
 608 0108 25       		.byte	0x25
 609 0109 1F010000 		.4byte	0x11f
 610 010d 02       		.uleb128 0x2
 611 010e 91       		.byte	0x91
 612 010f 6F       		.sleb128 -17
 613 0110 08       		.uleb128 0x8
 614 0111 6B020000 		.4byte	.LASF26
 615 0115 01       		.byte	0x1
 616 0116 28       		.byte	0x28
 617 0117 6B000000 		.4byte	0x6b
 618 011b 02       		.uleb128 0x2
 619 011c 91       		.byte	0x91
 620 011d 6E       		.sleb128 -18
 621 011e 00       		.byte	0
 622 011f 02       		.uleb128 0x2
 623 0120 01       		.byte	0x1
 624 0121 02       		.byte	0x2
 625 0122 8A020000 		.4byte	.LASF27
 626 0126 09       		.uleb128 0x9
 627 0127 CA000000 		.4byte	.LASF38
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 17


 628 012b 01       		.byte	0x1
 629 012c B5       		.byte	0xb5
 630 012d 6B000000 		.4byte	0x6b
 631 0131 00000000 		.4byte	.LFB33
 632 0135 E4000000 		.4byte	.LFE33-.LFB33
 633 0139 01       		.uleb128 0x1
 634 013a 9C       		.byte	0x9c
 635 013b 5C010000 		.4byte	0x15c
 636 013f 0A       		.uleb128 0xa
 637 0140 636D6400 		.ascii	"cmd\000"
 638 0144 01       		.byte	0x1
 639 0145 B5       		.byte	0xb5
 640 0146 77000000 		.4byte	0x77
 641 014a 02       		.uleb128 0x2
 642 014b 91       		.byte	0x91
 643 014c 6C       		.sleb128 -20
 644 014d 08       		.uleb128 0x8
 645 014e 6B020000 		.4byte	.LASF26
 646 0152 01       		.byte	0x1
 647 0153 B7       		.byte	0xb7
 648 0154 6B000000 		.4byte	0x6b
 649 0158 02       		.uleb128 0x2
 650 0159 91       		.byte	0x91
 651 015a 77       		.sleb128 -9
 652 015b 00       		.byte	0
 653 015c 0B       		.uleb128 0xb
 654 015d 36020000 		.4byte	.LASF29
 655 0161 01       		.byte	0x1
 656 0162 0F01     		.2byte	0x10f
 657 0164 00000000 		.4byte	.LFB34
 658 0168 46000000 		.4byte	.LFE34-.LFB34
 659 016c 01       		.uleb128 0x1
 660 016d 9C       		.byte	0x9c
 661 016e AA010000 		.4byte	0x1aa
 662 0172 0C       		.uleb128 0xc
 663 0173 3E000000 		.4byte	.LASF30
 664 0177 01       		.byte	0x1
 665 0178 0F01     		.2byte	0x10f
 666 017a 5D000000 		.4byte	0x5d
 667 017e 02       		.uleb128 0x2
 668 017f 91       		.byte	0x91
 669 0180 6C       		.sleb128 -20
 670 0181 0C       		.uleb128 0xc
 671 0182 A6010000 		.4byte	.LASF31
 672 0186 01       		.byte	0x1
 673 0187 0F01     		.2byte	0x10f
 674 0189 77000000 		.4byte	0x77
 675 018d 02       		.uleb128 0x2
 676 018e 91       		.byte	0x91
 677 018f 68       		.sleb128 -24
 678 0190 0D       		.uleb128 0xd
 679 0191 0A000000 		.4byte	.LBB2
 680 0195 1E000000 		.4byte	.LBE2-.LBB2
 681 0199 0E       		.uleb128 0xe
 682 019a 6C656400 		.ascii	"led\000"
 683 019e 01       		.byte	0x1
 684 019f 1001     		.2byte	0x110
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 18


 685 01a1 77000000 		.4byte	0x77
 686 01a5 02       		.uleb128 0x2
 687 01a6 91       		.byte	0x91
 688 01a7 74       		.sleb128 -12
 689 01a8 00       		.byte	0
 690 01a9 00       		.byte	0
 691 01aa 0F       		.uleb128 0xf
 692 01ab 6B000000 		.4byte	0x6b
 693 01af BA010000 		.4byte	0x1ba
 694 01b3 10       		.uleb128 0x10
 695 01b4 9F000000 		.4byte	0x9f
 696 01b8 1F       		.byte	0x1f
 697 01b9 00       		.byte	0
 698 01ba 11       		.uleb128 0x11
 699 01bb D9000000 		.4byte	.LASF32
 700 01bf 01       		.byte	0x1
 701 01c0 08       		.byte	0x8
 702 01c1 AA010000 		.4byte	0x1aa
 703 01c5 05       		.uleb128 0x5
 704 01c6 03       		.byte	0x3
 705 01c7 00000000 		.4byte	i2cReadBuffer
 706 01cb 11       		.uleb128 0x11
 707 01cc F6010000 		.4byte	.LASF33
 708 01d0 01       		.byte	0x1
 709 01d1 09       		.byte	0x9
 710 01d2 AA010000 		.4byte	0x1aa
 711 01d6 05       		.uleb128 0x5
 712 01d7 03       		.byte	0x3
 713 01d8 00000000 		.4byte	i2cWriteBuffer
 714 01dc 11       		.uleb128 0x11
 715 01dd 00000000 		.4byte	.LASF34
 716 01e1 01       		.byte	0x1
 717 01e2 0B       		.byte	0xb
 718 01e3 6B000000 		.4byte	0x6b
 719 01e7 05       		.uleb128 0x5
 720 01e8 03       		.byte	0x3
 721 01e9 00000000 		.4byte	buttonStatus
 722 01ed 00       		.byte	0
 723              		.section	.debug_abbrev,"",%progbits
 724              	.Ldebug_abbrev0:
 725 0000 01       		.uleb128 0x1
 726 0001 11       		.uleb128 0x11
 727 0002 01       		.byte	0x1
 728 0003 25       		.uleb128 0x25
 729 0004 0E       		.uleb128 0xe
 730 0005 13       		.uleb128 0x13
 731 0006 0B       		.uleb128 0xb
 732 0007 03       		.uleb128 0x3
 733 0008 0E       		.uleb128 0xe
 734 0009 1B       		.uleb128 0x1b
 735 000a 0E       		.uleb128 0xe
 736 000b 55       		.uleb128 0x55
 737 000c 17       		.uleb128 0x17
 738 000d 11       		.uleb128 0x11
 739 000e 01       		.uleb128 0x1
 740 000f 10       		.uleb128 0x10
 741 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 19


 742 0011 00       		.byte	0
 743 0012 00       		.byte	0
 744 0013 02       		.uleb128 0x2
 745 0014 24       		.uleb128 0x24
 746 0015 00       		.byte	0
 747 0016 0B       		.uleb128 0xb
 748 0017 0B       		.uleb128 0xb
 749 0018 3E       		.uleb128 0x3e
 750 0019 0B       		.uleb128 0xb
 751 001a 03       		.uleb128 0x3
 752 001b 0E       		.uleb128 0xe
 753 001c 00       		.byte	0
 754 001d 00       		.byte	0
 755 001e 03       		.uleb128 0x3
 756 001f 24       		.uleb128 0x24
 757 0020 00       		.byte	0
 758 0021 0B       		.uleb128 0xb
 759 0022 0B       		.uleb128 0xb
 760 0023 3E       		.uleb128 0x3e
 761 0024 0B       		.uleb128 0xb
 762 0025 03       		.uleb128 0x3
 763 0026 08       		.uleb128 0x8
 764 0027 00       		.byte	0
 765 0028 00       		.byte	0
 766 0029 04       		.uleb128 0x4
 767 002a 16       		.uleb128 0x16
 768 002b 00       		.byte	0
 769 002c 03       		.uleb128 0x3
 770 002d 0E       		.uleb128 0xe
 771 002e 3A       		.uleb128 0x3a
 772 002f 0B       		.uleb128 0xb
 773 0030 3B       		.uleb128 0x3b
 774 0031 05       		.uleb128 0x5
 775 0032 49       		.uleb128 0x49
 776 0033 13       		.uleb128 0x13
 777 0034 00       		.byte	0
 778 0035 00       		.byte	0
 779 0036 05       		.uleb128 0x5
 780 0037 04       		.uleb128 0x4
 781 0038 01       		.byte	0x1
 782 0039 0B       		.uleb128 0xb
 783 003a 0B       		.uleb128 0xb
 784 003b 49       		.uleb128 0x49
 785 003c 13       		.uleb128 0x13
 786 003d 3A       		.uleb128 0x3a
 787 003e 0B       		.uleb128 0xb
 788 003f 3B       		.uleb128 0x3b
 789 0040 0B       		.uleb128 0xb
 790 0041 01       		.uleb128 0x1
 791 0042 13       		.uleb128 0x13
 792 0043 00       		.byte	0
 793 0044 00       		.byte	0
 794 0045 06       		.uleb128 0x6
 795 0046 28       		.uleb128 0x28
 796 0047 00       		.byte	0
 797 0048 03       		.uleb128 0x3
 798 0049 0E       		.uleb128 0xe
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 20


 799 004a 1C       		.uleb128 0x1c
 800 004b 0B       		.uleb128 0xb
 801 004c 00       		.byte	0
 802 004d 00       		.byte	0
 803 004e 07       		.uleb128 0x7
 804 004f 2E       		.uleb128 0x2e
 805 0050 01       		.byte	0x1
 806 0051 3F       		.uleb128 0x3f
 807 0052 19       		.uleb128 0x19
 808 0053 03       		.uleb128 0x3
 809 0054 0E       		.uleb128 0xe
 810 0055 3A       		.uleb128 0x3a
 811 0056 0B       		.uleb128 0xb
 812 0057 3B       		.uleb128 0x3b
 813 0058 0B       		.uleb128 0xb
 814 0059 49       		.uleb128 0x49
 815 005a 13       		.uleb128 0x13
 816 005b 11       		.uleb128 0x11
 817 005c 01       		.uleb128 0x1
 818 005d 12       		.uleb128 0x12
 819 005e 06       		.uleb128 0x6
 820 005f 40       		.uleb128 0x40
 821 0060 18       		.uleb128 0x18
 822 0061 9642     		.uleb128 0x2116
 823 0063 19       		.uleb128 0x19
 824 0064 01       		.uleb128 0x1
 825 0065 13       		.uleb128 0x13
 826 0066 00       		.byte	0
 827 0067 00       		.byte	0
 828 0068 08       		.uleb128 0x8
 829 0069 34       		.uleb128 0x34
 830 006a 00       		.byte	0
 831 006b 03       		.uleb128 0x3
 832 006c 0E       		.uleb128 0xe
 833 006d 3A       		.uleb128 0x3a
 834 006e 0B       		.uleb128 0xb
 835 006f 3B       		.uleb128 0x3b
 836 0070 0B       		.uleb128 0xb
 837 0071 49       		.uleb128 0x49
 838 0072 13       		.uleb128 0x13
 839 0073 02       		.uleb128 0x2
 840 0074 18       		.uleb128 0x18
 841 0075 00       		.byte	0
 842 0076 00       		.byte	0
 843 0077 09       		.uleb128 0x9
 844 0078 2E       		.uleb128 0x2e
 845 0079 01       		.byte	0x1
 846 007a 3F       		.uleb128 0x3f
 847 007b 19       		.uleb128 0x19
 848 007c 03       		.uleb128 0x3
 849 007d 0E       		.uleb128 0xe
 850 007e 3A       		.uleb128 0x3a
 851 007f 0B       		.uleb128 0xb
 852 0080 3B       		.uleb128 0x3b
 853 0081 0B       		.uleb128 0xb
 854 0082 27       		.uleb128 0x27
 855 0083 19       		.uleb128 0x19
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 21


 856 0084 49       		.uleb128 0x49
 857 0085 13       		.uleb128 0x13
 858 0086 11       		.uleb128 0x11
 859 0087 01       		.uleb128 0x1
 860 0088 12       		.uleb128 0x12
 861 0089 06       		.uleb128 0x6
 862 008a 40       		.uleb128 0x40
 863 008b 18       		.uleb128 0x18
 864 008c 9642     		.uleb128 0x2116
 865 008e 19       		.uleb128 0x19
 866 008f 01       		.uleb128 0x1
 867 0090 13       		.uleb128 0x13
 868 0091 00       		.byte	0
 869 0092 00       		.byte	0
 870 0093 0A       		.uleb128 0xa
 871 0094 05       		.uleb128 0x5
 872 0095 00       		.byte	0
 873 0096 03       		.uleb128 0x3
 874 0097 08       		.uleb128 0x8
 875 0098 3A       		.uleb128 0x3a
 876 0099 0B       		.uleb128 0xb
 877 009a 3B       		.uleb128 0x3b
 878 009b 0B       		.uleb128 0xb
 879 009c 49       		.uleb128 0x49
 880 009d 13       		.uleb128 0x13
 881 009e 02       		.uleb128 0x2
 882 009f 18       		.uleb128 0x18
 883 00a0 00       		.byte	0
 884 00a1 00       		.byte	0
 885 00a2 0B       		.uleb128 0xb
 886 00a3 2E       		.uleb128 0x2e
 887 00a4 01       		.byte	0x1
 888 00a5 3F       		.uleb128 0x3f
 889 00a6 19       		.uleb128 0x19
 890 00a7 03       		.uleb128 0x3
 891 00a8 0E       		.uleb128 0xe
 892 00a9 3A       		.uleb128 0x3a
 893 00aa 0B       		.uleb128 0xb
 894 00ab 3B       		.uleb128 0x3b
 895 00ac 05       		.uleb128 0x5
 896 00ad 27       		.uleb128 0x27
 897 00ae 19       		.uleb128 0x19
 898 00af 11       		.uleb128 0x11
 899 00b0 01       		.uleb128 0x1
 900 00b1 12       		.uleb128 0x12
 901 00b2 06       		.uleb128 0x6
 902 00b3 40       		.uleb128 0x40
 903 00b4 18       		.uleb128 0x18
 904 00b5 9642     		.uleb128 0x2116
 905 00b7 19       		.uleb128 0x19
 906 00b8 01       		.uleb128 0x1
 907 00b9 13       		.uleb128 0x13
 908 00ba 00       		.byte	0
 909 00bb 00       		.byte	0
 910 00bc 0C       		.uleb128 0xc
 911 00bd 05       		.uleb128 0x5
 912 00be 00       		.byte	0
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 22


 913 00bf 03       		.uleb128 0x3
 914 00c0 0E       		.uleb128 0xe
 915 00c1 3A       		.uleb128 0x3a
 916 00c2 0B       		.uleb128 0xb
 917 00c3 3B       		.uleb128 0x3b
 918 00c4 05       		.uleb128 0x5
 919 00c5 49       		.uleb128 0x49
 920 00c6 13       		.uleb128 0x13
 921 00c7 02       		.uleb128 0x2
 922 00c8 18       		.uleb128 0x18
 923 00c9 00       		.byte	0
 924 00ca 00       		.byte	0
 925 00cb 0D       		.uleb128 0xd
 926 00cc 0B       		.uleb128 0xb
 927 00cd 01       		.byte	0x1
 928 00ce 11       		.uleb128 0x11
 929 00cf 01       		.uleb128 0x1
 930 00d0 12       		.uleb128 0x12
 931 00d1 06       		.uleb128 0x6
 932 00d2 00       		.byte	0
 933 00d3 00       		.byte	0
 934 00d4 0E       		.uleb128 0xe
 935 00d5 34       		.uleb128 0x34
 936 00d6 00       		.byte	0
 937 00d7 03       		.uleb128 0x3
 938 00d8 08       		.uleb128 0x8
 939 00d9 3A       		.uleb128 0x3a
 940 00da 0B       		.uleb128 0xb
 941 00db 3B       		.uleb128 0x3b
 942 00dc 05       		.uleb128 0x5
 943 00dd 49       		.uleb128 0x49
 944 00de 13       		.uleb128 0x13
 945 00df 02       		.uleb128 0x2
 946 00e0 18       		.uleb128 0x18
 947 00e1 00       		.byte	0
 948 00e2 00       		.byte	0
 949 00e3 0F       		.uleb128 0xf
 950 00e4 01       		.uleb128 0x1
 951 00e5 01       		.byte	0x1
 952 00e6 49       		.uleb128 0x49
 953 00e7 13       		.uleb128 0x13
 954 00e8 01       		.uleb128 0x1
 955 00e9 13       		.uleb128 0x13
 956 00ea 00       		.byte	0
 957 00eb 00       		.byte	0
 958 00ec 10       		.uleb128 0x10
 959 00ed 21       		.uleb128 0x21
 960 00ee 00       		.byte	0
 961 00ef 49       		.uleb128 0x49
 962 00f0 13       		.uleb128 0x13
 963 00f1 2F       		.uleb128 0x2f
 964 00f2 0B       		.uleb128 0xb
 965 00f3 00       		.byte	0
 966 00f4 00       		.byte	0
 967 00f5 11       		.uleb128 0x11
 968 00f6 34       		.uleb128 0x34
 969 00f7 00       		.byte	0
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 23


 970 00f8 03       		.uleb128 0x3
 971 00f9 0E       		.uleb128 0xe
 972 00fa 3A       		.uleb128 0x3a
 973 00fb 0B       		.uleb128 0xb
 974 00fc 3B       		.uleb128 0x3b
 975 00fd 0B       		.uleb128 0xb
 976 00fe 49       		.uleb128 0x49
 977 00ff 13       		.uleb128 0x13
 978 0100 3F       		.uleb128 0x3f
 979 0101 19       		.uleb128 0x19
 980 0102 02       		.uleb128 0x2
 981 0103 18       		.uleb128 0x18
 982 0104 00       		.byte	0
 983 0105 00       		.byte	0
 984 0106 00       		.byte	0
 985              		.section	.debug_aranges,"",%progbits
 986 0000 2C000000 		.4byte	0x2c
 987 0004 0200     		.2byte	0x2
 988 0006 00000000 		.4byte	.Ldebug_info0
 989 000a 04       		.byte	0x4
 990 000b 00       		.byte	0
 991 000c 0000     		.2byte	0
 992 000e 0000     		.2byte	0
 993 0010 00000000 		.4byte	.LFB32
 994 0014 28010000 		.4byte	.LFE32-.LFB32
 995 0018 00000000 		.4byte	.LFB33
 996 001c E4000000 		.4byte	.LFE33-.LFB33
 997 0020 00000000 		.4byte	.LFB34
 998 0024 46000000 		.4byte	.LFE34-.LFB34
 999 0028 00000000 		.4byte	0
 1000 002c 00000000 		.4byte	0
 1001              		.section	.debug_ranges,"",%progbits
 1002              	.Ldebug_ranges0:
 1003 0000 00000000 		.4byte	.LFB32
 1004 0004 28010000 		.4byte	.LFE32
 1005 0008 00000000 		.4byte	.LFB33
 1006 000c E4000000 		.4byte	.LFE33
 1007 0010 00000000 		.4byte	.LFB34
 1008 0014 46000000 		.4byte	.LFE34
 1009 0018 00000000 		.4byte	0
 1010 001c 00000000 		.4byte	0
 1011              		.section	.debug_line,"",%progbits
 1012              	.Ldebug_line0:
 1013 0000 08010000 		.section	.debug_str,"MS",%progbits,1
 1013      02004D00 
 1013      00000201 
 1013      FB0E0D00 
 1013      01010101 
 1014              	.LASF34:
 1015 0000 62757474 		.ascii	"buttonStatus\000"
 1015      6F6E5374 
 1015      61747573 
 1015      00
 1016              	.LASF20:
 1017 000d 434D445F 		.ascii	"CMD_SET_RED_GREEN\000"
 1017      5345545F 
 1017      5245445F 
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 24


 1017      47524545 
 1017      4E00
 1018              	.LASF22:
 1019 001f 434D445F 		.ascii	"CMD_SET_GREEN_BLUE\000"
 1019      5345545F 
 1019      47524545 
 1019      4E5F424C 
 1019      554500
 1020              	.LASF16:
 1021 0032 434D445F 		.ascii	"CMD_SET_OFF\000"
 1021      5345545F 
 1021      4F464600 
 1022              	.LASF30:
 1023 003e 626C6F63 		.ascii	"block_number\000"
 1023      6B5F6E75 
 1023      6D626572 
 1023      00
 1024              	.LASF3:
 1025 004b 73686F72 		.ascii	"short unsigned int\000"
 1025      7420756E 
 1025      7369676E 
 1025      65642069 
 1025      6E7400
 1026              	.LASF37:
 1027 005e 433A5C55 		.ascii	"C:\\Users\\James Sun\\Documents\\Git\\Whackamole\\W"
 1027      73657273 
 1027      5C4A616D 
 1027      65732053 
 1027      756E5C44 
 1028 008b 6861636B 		.ascii	"hackamole\\Slave.cydsn\000"
 1028      616D6F6C 
 1028      655C536C 
 1028      6176652E 
 1028      63796473 
 1029              	.LASF23:
 1030 00a1 434D445F 		.ascii	"CMD_SET_RED_GREEN_BLUE\000"
 1030      5345545F 
 1030      5245445F 
 1030      47524545 
 1030      4E5F424C 
 1031              	.LASF11:
 1032 00b8 666C6F61 		.ascii	"float\000"
 1032      7400
 1033              	.LASF17:
 1034 00be 434D445F 		.ascii	"CMD_SET_RED\000"
 1034      5345545F 
 1034      52454400 
 1035              	.LASF38:
 1036 00ca 45786563 		.ascii	"ExecuteCommand\000"
 1036      75746543 
 1036      6F6D6D61 
 1036      6E6400
 1037              	.LASF32:
 1038 00d9 69326352 		.ascii	"i2cReadBuffer\000"
 1038      65616442 
 1038      75666665 
 1038      7200
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 25


 1039              	.LASF5:
 1040 00e7 6C6F6E67 		.ascii	"long unsigned int\000"
 1040      20756E73 
 1040      69676E65 
 1040      6420696E 
 1040      7400
 1041              	.LASF9:
 1042 00f9 75696E74 		.ascii	"uint8\000"
 1042      3800
 1043              	.LASF35:
 1044 00ff 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1044      43313120 
 1044      352E342E 
 1044      31203230 
 1044      31363036 
 1045 0132 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1045      20726576 
 1045      6973696F 
 1045      6E203233 
 1045      37373135 
 1046 0165 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1046      66756E63 
 1046      74696F6E 
 1046      2D736563 
 1046      74696F6E 
 1047              	.LASF19:
 1048 018d 434D445F 		.ascii	"CMD_SET_BLUE\000"
 1048      5345545F 
 1048      424C5545 
 1048      00
 1049              	.LASF12:
 1050 019a 646F7562 		.ascii	"double\000"
 1050      6C6500
 1051              	.LASF28:
 1052 01a1 6D61696E 		.ascii	"main\000"
 1052      00
 1053              	.LASF31:
 1054 01a6 636F6C6F 		.ascii	"color\000"
 1054      7200
 1055              	.LASF10:
 1056 01ac 75696E74 		.ascii	"uint32\000"
 1056      333200
 1057              	.LASF1:
 1058 01b3 756E7369 		.ascii	"unsigned char\000"
 1058      676E6564 
 1058      20636861 
 1058      7200
 1059              	.LASF8:
 1060 01c1 756E7369 		.ascii	"unsigned int\000"
 1060      676E6564 
 1060      20696E74 
 1060      00
 1061              	.LASF21:
 1062 01ce 434D445F 		.ascii	"CMD_SET_RED_BLUE\000"
 1062      5345545F 
 1062      5245445F 
 1062      424C5545 
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 26


 1062      00
 1063              	.LASF7:
 1064 01df 6C6F6E67 		.ascii	"long long unsigned int\000"
 1064      206C6F6E 
 1064      6720756E 
 1064      7369676E 
 1064      65642069 
 1065              	.LASF33:
 1066 01f6 69326357 		.ascii	"i2cWriteBuffer\000"
 1066      72697465 
 1066      42756666 
 1066      657200
 1067              	.LASF15:
 1068 0205 73697A65 		.ascii	"sizetype\000"
 1068      74797065 
 1068      00
 1069              	.LASF6:
 1070 020e 6C6F6E67 		.ascii	"long long int\000"
 1070      206C6F6E 
 1070      6720696E 
 1070      7400
 1071              	.LASF36:
 1072 021c 6D61696E 		.ascii	"main.c\000"
 1072      2E6300
 1073              	.LASF13:
 1074 0223 63686172 		.ascii	"char\000"
 1074      00
 1075              	.LASF18:
 1076 0228 434D445F 		.ascii	"CMD_SET_GREEN\000"
 1076      5345545F 
 1076      47524545 
 1076      4E00
 1077              	.LASF29:
 1078 0236 53657454 		.ascii	"SetTileColor\000"
 1078      696C6543 
 1078      6F6C6F72 
 1078      00
 1079              	.LASF2:
 1080 0243 73686F72 		.ascii	"short int\000"
 1080      7420696E 
 1080      7400
 1081              	.LASF25:
 1082 024d 69735072 		.ascii	"isPressed\000"
 1082      65737365 
 1082      6400
 1083              	.LASF24:
 1084 0257 4E554D5F 		.ascii	"NUM_COLORS\000"
 1084      434F4C4F 
 1084      525300
 1085              	.LASF4:
 1086 0262 6C6F6E67 		.ascii	"long int\000"
 1086      20696E74 
 1086      00
 1087              	.LASF26:
 1088 026b 73746174 		.ascii	"status\000"
 1088      757300
 1089              	.LASF14:
ARM GAS  C:\Users\JAMESS~1\AppData\Local\Temp\ccMnE8Ig.s 			page 27


 1090 0272 6C6F6E67 		.ascii	"long double\000"
 1090      20646F75 
 1090      626C6500 
 1091              	.LASF0:
 1092 027e 7369676E 		.ascii	"signed char\000"
 1092      65642063 
 1092      68617200 
 1093              	.LASF27:
 1094 028a 5F426F6F 		.ascii	"_Bool\000"
 1094      6C00
 1095              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
